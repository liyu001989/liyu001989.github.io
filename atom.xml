<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yu Li</title>
  <subtitle>原谅我还是太懒了...</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.lyyw.com/"/>
  <updated>2017-03-06T15:39:37.000Z</updated>
  <id>http://blog.lyyw.com/</id>
  
  <author>
    <name>Yu Li</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>webpack 压缩的一个坑</title>
    <link href="http://blog.lyyw.com/2017/02/27/2017-02-27-webpack%E5%8E%8B%E7%BC%A9%E7%9A%84%E4%B8%80%E4%B8%AA%E5%9D%91/"/>
    <id>http://blog.lyyw.com/2017/02/27/2017-02-27-webpack压缩的一个坑/</id>
    <published>2017-02-27T08:31:41.000Z</published>
    <updated>2017-03-06T15:39:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>laravel 5.3的时候开始使用 webpack 2 + vue 2，放弃了 requirejs + bower。</p>
<p>当时的 larave mix 用着挺麻烦的，各种坑，所以我们直接使用的webpack 目前用着还挺顺手的。</p>
<p>这个坑是这样的，当时使用的是 webpack 2.1 的 beta 版本，webpack -p 一直很正常，但是前几天升级到了 webpack 2.2.1 ,相应的 把vue，vue-loader 等各种包也升级到了最新，也调整了 webpack 的配置，但是突然发现，webpack -p 一直报错语法错误。</p>
<p>不明白为什么，只能慢慢定位了，最终发现是 vue component 中只要使用了 es6 的语法，就会报语法错误，不在 component 中的 es6 语法就没问题。这个现象说明是 babel 没有转换 vue component 中的 es6。这我就不明白了，配置大概如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  test: /\.js$/,</div><div class="line">  exclude: /node_modules/,</div><div class="line">  loader: &quot;babel-loader&quot;,</div><div class="line">  query: &#123; presets: [ &quot;es2015&quot; ] &#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<p>原来一直没问题，没理由现在不行了啊，终于让我在 vue-loader 的 issues 中找到了答案。<a href="https://github.com/vuejs/vue-loader/issues/350" target="_blank" rel="external">https://github.com/vuejs/vue-loader/issues/350</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">作者的原话</div><div class="line"></div><div class="line">Don&apos;t use query, use .babelrc. Your loader query only applies to the files matched by /\.js$/ so they won&apos;t apply to vue files.</div></pre></td></tr></table></figure>
<p>意思就是不用 query，用 .babelrc ！！！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;laravel 5.3的时候开始使用 webpack 2 + vue 2，放弃了 requirejs + bower。&lt;/p&gt;
&lt;p&gt;当时的 larave mix 用着挺麻烦的，各种坑，所以我们直接使用的webpack 目前用着还挺顺手的。&lt;/p&gt;
&lt;p&gt;这个坑是这样的，当
    
    </summary>
    
    
      <category term="webpack" scheme="http://blog.lyyw.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>[翻译] lumen 5.4 中 request 对象的变化</title>
    <link href="http://blog.lyyw.com/2017/02/18/2017-02-18-%E7%BF%BB%E8%AF%91-lumen-5-4-%E4%B8%AD-request-%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%8F%98%E5%8C%96/"/>
    <id>http://blog.lyyw.com/2017/02/18/2017-02-18-翻译-lumen-5-4-中-request-对象的变化/</id>
    <published>2017-02-18T08:00:56.000Z</published>
    <updated>2017-02-18T08:09:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>原文：<a href="https://laravel-news.com/request-object-changes-in-lumen-5-4" target="_blank" rel="external">https://laravel-news.com/request-object-changes-in-lumen-5-4</a></p>
<p>几个星期以前，lumen 的核心组修正了一个单元测试调用 request 对象的问题，修正之前，request 是空的而且所有的表单数据在单元测试中都无法获取到。</p>
<p>这个问题关系到 Lumen 是如何启动的，简单的说，request 被过早的在启动程序中作为单例实例化了。在单元测试中创建 request 将不能修改 request 对象，因为它已经作为单例实例化了，这就是为什么我们不能在单元测试重建它。</p>
<p>为了解决这个问题，我们延迟了 request 实例的创建，直到应用开始分发 request 到路由，这与 laravel 的启动流程一致。</p>
<p>修正了这个问题，lumen 的用户将不能在你的 Service Providers 的任何地方使用 request 实例。这是因为 Lumen 注册 providers 的时候，request 对象还没有被实例化。</p>
<p>可代替的解决办法是复制所有 Service Providers 中使用 request 对象的代码，移动到一个全局中间件中；这个中间件会在 获取了 request 之后直接运行。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文：&lt;a href=&quot;https://laravel-news.com/request-object-changes-in-lumen-5-4&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://laravel-news.com/request
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>对 REST 的理解</title>
    <link href="http://blog.lyyw.com/2017/02/09/2017-02-09%20%E5%AF%B9rest%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>http://blog.lyyw.com/2017/02/09/2017-02-09 对rest的理解/</id>
    <published>2017-02-09T01:58:03.000Z</published>
    <updated>2017-02-10T04:35:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>整理一下目前为止我对 REST 的理解</p>
<h2 id="假的-REST-接口"><a href="#假的-REST-接口" class="headerlink" title="假的 REST 接口"></a>假的 REST 接口</h2><p>很多人看到 REST 反应就是，利用 http 动词，处理资源, 随便看看就明白了。</p>
<p>这种人很容易就写出这样一种接口，所有的请求统一返回 200，body 中有，success, message, data, 大家的实现不同，但是大致就是这么个意思。</p>
<p>随处也都能看到这样的讨论，比如<a href="https://www.google.co.jp/search?q=site:v2ex.com/t+rest&amp;gws_rd=cr&amp;ei=eoiaWMypLcej8QW7uI5g" target="_blank" rel="external">这里</a>。</p>
<h2 id="理解-REST"><a href="#理解-REST" class="headerlink" title="理解 REST"></a>理解 REST</h2><p>我们以一个简单的例子开始，假设我们需要写一套api，功能包括了用户，商品，订单，供应商。</p>
<h3 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h3><p>写 REST 接口，首先需要明白<code>资源</code>这个概念，所有的东西都是资源，我们始终是在操作资源，当然资源需要是个名词。</p>
<p>于是我们定义出这样一些资源，users, products, orders, vendors。注意这里是复数，因为既然是资源，肯定是一堆，是个集合。单复数的概念还是很重要的。</p>
<h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><p>状态码是很重要的，是有意义的，客户端是需要根据状态码做判断的。比如201表示资源被创建了；204 表示请求成功了，但是并没有什么信息需要返回，body 当然是空；202 表示服务器接受了请求，但是还未处理，响应中应该包含相应的指示信息，告诉客户端该去哪里查询这次处理是否真正完成了等等。</p>
<p>你可能会遇到一些同事说它判断不了状态码，一定要解析body，body中需要一个字段表示是否成功…等等，那么你需要做的是跟他讲道理，让他看看 http 协议。</p>
<p>有用的链接 <a href="https://httpstatuses.com/" target="_blank" rel="external">https://httpstatuses.com/</a></p>
<h3 id="处理资源"><a href="#处理资源" class="headerlink" title="处理资源"></a>处理资源</h3><p>有了资源，我们就会需要对资源进行增删改查，对应到 http 的动词，就是 post，delete，put/patch，get。</p>
<p>以一个商品资源为例</p>
<table>
<thead>
<tr>
<th>http 动词</th>
<th>url</th>
<th>返回状态码</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>post</td>
<td>/api/products</td>
<td>201</td>
<td>创建一个商品</td>
</tr>
<tr>
<td>get</td>
<td>/api/products</td>
<td>200</td>
<td>获取商品列表</td>
</tr>
<tr>
<td>get</td>
<td>/api/products/{id}</td>
<td>200</td>
<td>获取某个商品信息</td>
</tr>
<tr>
<td>put</td>
<td>/api/products/{id}</td>
<td>200 / 204</td>
<td>完整的替换某个商品</td>
</tr>
<tr>
<td>patch</td>
<td>/api/products/{id}</td>
<td>200 / 204</td>
<td>部分更新某个商品</td>
</tr>
<tr>
<td>delete</td>
<td>/api/products/{id}</td>
<td>204</td>
<td>删除某个商品</td>
</tr>
</tbody>
</table>
<p>可参考 <a href="https://tools.ietf.org/html/rfc7231" target="_blank" rel="external">rfc7231</a></p>
<h3 id="第一个问题"><a href="#第一个问题" class="headerlink" title="第一个问题"></a>第一个问题</h3><p>用户，商品，订单，供应商 每个都是独立的资源，那么如果我有一个订单详情页面，显示哪个用户买的什么商品，买的谁的商品，什么时间买的。也就是同时获取了4个资源的信息，难道要请求4次吗？</p>
<p>比如订单id为10,用户id为1，商品id为5，供应商id为2。</p>
<ul>
<li>get /api/orders/10</li>
<li>get /api/products/5</li>
<li>get /api/vendors/2</li>
<li>get /api/users/1</li>
</ul>
<p>或者是另一种解决办法，订单详情默认包含了它的商品，用户，供应商信息？</p>
<ul>
<li>get /api/orders/10</li>
</ul>
<p>这样是请求了一次，但是如果客户端只需要订单信息，我为什么要进行额外的查询，返回额外的信息。</p>
<p><strong>完美的方案</strong></p>
<p>首先，接口的设计应该站在资源的角度，关心的不是页面如何显示，而是客户端需要什么资源，而需要什么当然只能是客户端自己决定。其次资源之间是有关联的，我们要利用资源之间的关系，于是可能是下面这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">get /api/orders/10?include=user,vendor,product</div></pre></td></tr></table></figure>
<p>意思就是我需要10号订单的数据，同时需要订单相关的用户，供应商，商品信息。注意这里是单数，表示其相关的单个资源。</p>
<h3 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h3><p>有了上面完美的方案，但是资源的数据到底是什么样的，又要怎么嵌套呢？先参考一下<a href="http://jsonapi.org.cn/format/" target="_blank" rel="external">这里</a>。</p>
<p>对于资源来说，肯定需要一个统一的结构，也方便我们嵌套。我们先理解一个简单好用的json结构。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	&quot;data&quot;: &#123;...&#125;</div><div class="line">	&quot;meta&quot;: &#123;...&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>data 中是这个资源的数据，meta 可选，是资源之外，其他的一些信息，比如分页。对于嵌套的资源同样也是这样。那么对于上面的请求，响应应该是下面这样。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">get /api/orders/10?include=user,vendor,product</div><div class="line"></div><div class="line">&#123;</div><div class="line">	&quot;data&quot;: &#123;</div><div class="line">		&quot;id&quot;: 10,</div><div class="line">		&quot;title&quot;: 一个订单,</div><div class="line">		...</div><div class="line">		&quot;production&quot;: &#123;</div><div class="line">			&quot;data&quot;: &#123;</div><div class="line">				&quot;id&quot;: 5,</div><div class="line">				&quot;price&quot;: 15</div><div class="line">				...</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		&quot;user&quot;: &#123;</div><div class="line">			&quot;data&quot;: &#123;</div><div class="line">				&quot;id&quot;: 1,</div><div class="line">				&quot;name&quot;: &quot;foo&quot;</div><div class="line">				...</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		&quot;vendor&quot;: &#123;</div><div class="line">			&quot;data&quot;: &#123;</div><div class="line">				&quot;id&quot;: 2,</div><div class="line">				&quot;name&quot;: &quot;bar&quot;</div><div class="line">				...</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再举个例子</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">我的订单列表,</div><div class="line">get /api/user/orders?include=product,vendor</div><div class="line"></div><div class="line">&#123;</div><div class="line">	&quot;data&quot;: [</div><div class="line">		&#123;</div><div class="line">			&quot;id&quot;: 1,</div><div class="line">			&quot;title&quot;: 一个订单,</div><div class="line">			...</div><div class="line">			&quot;product&quot;: &#123;</div><div class="line">				&quot;data&quot;: &#123;</div><div class="line">					&quot;id&quot;: 5,</div><div class="line">					&quot;price&quot;: 15</div><div class="line">					...</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			&quot;vendor&quot;: &#123;</div><div class="line">				&quot;data&quot;: &#123;</div><div class="line">					&quot;id&quot;: 2,</div><div class="line">					&quot;name&quot;: &quot;bar&quot;</div><div class="line">					...</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;,</div><div class="line">		...</div><div class="line">	],</div><div class="line">	&quot;meta&quot;: &#123;</div><div class="line">		&quot;pagination&quot;: &#123;</div><div class="line">			&quot;total&quot;: 60,</div><div class="line">			&quot;count&quot;: 15,</div><div class="line">			&quot;per_page&quot;: 15,</div><div class="line">			&quot;current_page&quot;: 1,</div><div class="line">			&quot;total_pages&quot;: 4,</div><div class="line">			&quot;links&quot;: &#123;</div><div class="line">				&quot;next&quot;: &quot;http://foobar/api/user/orders?page=2&quot;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>利用好资源的关系和嵌套我们再补充几个接口</p>
<table>
<thead>
<tr>
<th>动词</th>
<th>url</th>
<th>描述</th>
<th>includes</th>
</tr>
</thead>
<tbody>
<tr>
<td>get</td>
<td>/api/vendors/{id}/products</td>
<td>获取某个供应商的所有商品</td>
<td>vendor</td>
</tr>
<tr>
<td>get</td>
<td>/api/vendors/{id}/products/{id}</td>
<td>获取某个供应商的某个商品</td>
<td>vendor</td>
</tr>
<tr>
<td>get</td>
<td>/api/vendors</td>
<td>获取供应商列表</td>
<td>products</td>
</tr>
<tr>
<td>get</td>
<td>/api/user/orders</td>
<td>我的订单列表</td>
<td>vendor,products</td>
</tr>
<tr>
<td>get</td>
<td>/api/users/{id}/orders</td>
<td>某个用户的订单列表</td>
<td>vendor,products</td>
</tr>
</tbody>
</table>
<p>注意最后两个，这里是参考了 github，用单数的 user 表示当前用户，因为我们如果有token，服务器就知道我们是谁。</p>
<p>当然这里只是个例子，真实业务我们可能并不能查看别人下的订单，</p>
<h3 id="第二个问题"><a href="#第二个问题" class="headerlink" title="第二个问题"></a>第二个问题</h3><p>我们下了一个订单，可能会伴随很多状态，待付款，已付款，已发货，已收货，已取消等等，如何设计api呢？</p>
<p>其实一开始大家很可能会这么写</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">patch /api/orders/&#123;id&#125;/pay    对某个订单付款</div><div class="line">patch /api/orders/&#123;id&#125;/cancel 取消某个订单</div></pre></td></tr></table></figure>
<p>这样或许可以，但是我们引入了动词，有没有更好的方法呢？</p>
<p>其实我们始终是在更新订单状态</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">patch /api/orders/&#123;id&#125;</div><div class="line">body  status: paid,canceled</div></pre></td></tr></table></figure>
<p>或许可以这样，对于资源来说我们就是要把订单的状态改为paid或者canceled。但是对于每个状态，提交的参数和要处理的数据可能有很大的不同，难道都写在一个方法里？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$status = $request-&gt;get(&apos;status&apos;);</div><div class="line">$method = camel_case(&apos;patch_&apos;.$status);</div><div class="line">return $this-&gt;$method($order);</div></pre></td></tr></table></figure>
<p>接口是一个，但是我们接受到请求只有依然是可以进行接口分发的，类似上面这样。</p>
<h3 id="put-和-patch-的关系"><a href="#put-和-patch-的关系" class="headerlink" title="put 和 patch 的关系"></a>put 和 patch 的关系</h3><p>两个方法都是更新资源，而且幂等的，但是 put 是整个替换资源，首先需要判断必填项，然后根据请求替换这个资源。patch 是提交什么更新什么。</p>
<p>第二 put 是可以创建资源的，但是一般只存在于客户端可以指定资源id的情况下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">put /api/orders/100</div></pre></td></tr></table></figure>
<p>更新资源id为100的资源，如果不存在则创建。创建的话返回201，更新的话返回200。这种情况很少见，因为现在基本上都是服务器生成id。所以对于我们平时处理的业务，其实大部分是 patch。</p>
<h3 id="版本区分"><a href="#版本区分" class="headerlink" title="版本区分"></a>版本区分</h3><p>有了 api 当然需要区分版本，因为使用时需要更新的。</p>
<p>那么用什么来区分版本其实大体上有两种</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/api/v1/orders</div><div class="line">/api/v2/orders</div></pre></td></tr></table></figure>
<p>或者利用 header</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/api/orders</div><div class="line"></div><div class="line">Accept: application/vnd.foobar.v1+json</div><div class="line">Accept: application/vnd.foobar.v2+json</div></pre></td></tr></table></figure>
<p>一些教程里面觉得放在url上更直观，比如阮一峰的教程，很多人也用 github 作为例子。</p>
<p>但是其实你看看 github api 的第一页，<a href="https://developer.github.com/v3/" target="_blank" rel="external">https://developer.github.com/v3/</a>, github 及 其他一些的 rest 教程都是推荐第二种的。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面是我的个人理解，目前基本是按照这个思路实现的接口，但是依然也有很多地方觉得不完美，不规范。欢迎指正和讨论</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整理一下目前为止我对 REST 的理解&lt;/p&gt;
&lt;h2 id=&quot;假的-REST-接口&quot;&gt;&lt;a href=&quot;#假的-REST-接口&quot; class=&quot;headerlink&quot; title=&quot;假的 REST 接口&quot;&gt;&lt;/a&gt;假的 REST 接口&lt;/h2&gt;&lt;p&gt;很多人看到 REST 
    
    </summary>
    
    
      <category term="REST" scheme="http://blog.lyyw.com/tags/REST/"/>
    
  </entry>
  
  <entry>
    <title>laravel/lumen 代码检查和格式化</title>
    <link href="http://blog.lyyw.com/2017/01/17/2017-01-17-laravel-lumen-%E4%BB%A3%E7%A0%81%E6%A3%80%E6%9F%A5%E5%92%8C%E6%A0%BC%E5%BC%8F%E5%8C%96/"/>
    <id>http://blog.lyyw.com/2017/01/17/2017-01-17-laravel-lumen-代码检查和格式化/</id>
    <published>2017-01-17T06:10:17.000Z</published>
    <updated>2017-02-18T08:10:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>代码检查和格式化还是很重要的，使用下面两个工具快速的lint和格式化代码</p>
<p>php-cs-fixer 还没有支持到 psr4，对于 laravel 来说总是把 namespace 的 App 转为小写，所以需要自定义一些配置。</p>
<h2 id="lint"><a href="#lint" class="headerlink" title="lint"></a>lint</h2><ul>
<li>安装 <a href="https://github.com/overtrue/phplint" target="_blank" rel="external">https://github.com/overtrue/phplint</a></li>
<li>配置 phplint 忽略vendor目录</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.phplint.yml</div><div class="line">	</div><div class="line">path: ./</div><div class="line">jobs: 10</div><div class="line">extensions:</div><div class="line">  - php</div><div class="line">exclude:</div><div class="line">  - vendor</div><div class="line">  - storage</div></pre></td></tr></table></figure>
<h2 id="php-cs-fixer-v1版本"><a href="#php-cs-fixer-v1版本" class="headerlink" title="php-cs-fixer v1版本"></a>php-cs-fixer v1版本</h2><ul>
<li>安装 php-cs-fixer<br><a href="https://github.com/FriendsOfPHP/PHP-CS-Fixer/tree/1.13" target="_blank" rel="external">https://github.com/FriendsOfPHP/PHP-CS-Fixer/tree/1.13</a> 使用1.*分支</li>
<li>将 <a href="https://gist.github.com/liyu001989/e03ba808c61ab0df77d118a9a30549a0" target="_blank" rel="external">https://gist.github.com/liyu001989/e03ba808c61ab0df77d118a9a30549a0</a>这个文件放在项目根目录</li>
<li>运行 php-cs-fixer fix ./ –config-file=.php_cs</li>
</ul>
<h2 id="php-cs-fixer-v2版本"><a href="#php-cs-fixer-v2版本" class="headerlink" title="php-cs-fixer v2版本"></a>php-cs-fixer v2版本</h2><ul>
<li>安装 php-cs-fixer v2</li>
<li>将 <a href="https://gist.github.com/liyu001989/8effc9aaaa0897a11e7a1bcc73f83b82" target="_blank" rel="external">https://gist.github.com/liyu001989/8effc9aaaa0897a11e7a1bcc73f83b82</a>这个文件放在项目根目录</li>
<li>运行 php-cs-fixer fix ./</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;代码检查和格式化还是很重要的，使用下面两个工具快速的lint和格式化代码&lt;/p&gt;
&lt;p&gt;php-cs-fixer 还没有支持到 psr4，对于 laravel 来说总是把 namespace 的 App 转为小写，所以需要自定义一些配置。&lt;/p&gt;
&lt;h2 id=&quot;lint&quot;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2017 计划</title>
    <link href="http://blog.lyyw.com/2017/01/05/2017-01-05%202017%E5%B9%B4%E8%AE%A1%E5%88%92/"/>
    <id>http://blog.lyyw.com/2017/01/05/2017-01-05 2017年计划/</id>
    <published>2017-01-05T15:17:31.000Z</published>
    <updated>2017-02-05T12:38:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>先总结一下2016年，5月份立了一些flag，完成了一大半吧算。node在看，vue工作中也开始使用了。能学的东西一大堆，还是太懒了！</p>
<p>先大致计划一下</p>
<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><ul>
<li>[ ] laravel/lumen 5.4 更新，学习</li>
<li>[ ] node 既然有<a href="http://www.jianshu.com/p/7ea2b75dd67a" target="_blank" rel="external">治愈计划</a>，那么照着学吧，详细的计划慢慢写</li>
<li>[ ] 用 node 实现一套api，写个小项目</li>
<li>[ ] 尽量的写博客吧，能写点啥就写点啥吧</li>
</ul>
<h2 id="书单"><a href="#书单" class="headerlink" title="书单"></a>书单</h2><p>尽量多看点书吧</p>
<ul>
<li>[ ] 你不知道的JavaScript(上卷)</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先总结一下2016年，5月份立了一些flag，完成了一大半吧算。node在看，vue工作中也开始使用了。能学的东西一大堆，还是太懒了！&lt;/p&gt;
&lt;p&gt;先大致计划一下&lt;/p&gt;
&lt;h2 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数据签名</title>
    <link href="http://blog.lyyw.com/2016/12/12/2016-12-12%20%E6%95%B0%E6%8D%AE%E7%AD%BE%E5%90%8D/"/>
    <id>http://blog.lyyw.com/2016/12/12/2016-12-12 数据签名/</id>
    <published>2016-12-12T02:40:48.000Z</published>
    <updated>2017-01-05T15:10:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前看到v2ex上的一个帖子<a href="https://www.v2ex.com/t/326285" target="_blank" rel="external">https://www.v2ex.com/t/326285</a>，然后回想一下对接支付宝和微信的时候，其实都有过类似的处理。</p>
<p>于是想整理一下我对数据传输安全的理解。</p>
<h2 id="名词定义"><a href="#名词定义" class="headerlink" title="名词定义"></a>名词定义</h2><p>先看看几个名词定义</p>
<p>mac: 消息认证码 Message Authentication Code</p>
<p>hmac: 密钥相关的哈希运算消息认证码（Hash-based Message Authentication Code）</p>
<h2 id="数据传输安全"><a href="#数据传输安全" class="headerlink" title="数据传输安全"></a>数据传输安全</h2><h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><p>数据安全首先就是保证数据不被第三方得到，那么就得对数据进行加密，那么其实https干的就是这个事情。https保证了server的可靠性，也对数据进行了加密，所以首先应该尽量使用https。</p>
<h3 id="防篡改"><a href="#防篡改" class="headerlink" title="防篡改"></a>防篡改</h3><p>首先就是对于webhook这种通知类的请求，就比如说是支付宝某个订单支付成功了，异步通知我的服务器这个订单支付成功了，即便我们使用了https，也无法知道这个通知是支付宝服务器发起的。</p>
<p>https 是在传输层保证了数据安全，那么在某些情况下</p>
<ul>
<li>使用的依然是http</li>
<li>虽然外部使用了https，但是进行了负载均衡，负责负载均衡的服务器之间依然使用http传输，见<a href="https://www.zhihu.com/question/52392988/answer/130489654" target="_blank" rel="external">知乎讨论</a></li>
<li>某些支付相关的重要数据，不能单单依赖传输层，应用层依然需要保证数据安全</li>
</ul>
<p>这些时候就需要我们自己做签名的处理，参考<a href="https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=4_3" target="_blank" rel="external">微信签名算法</a>和<a href="https://doc.open.alipay.com/docs/doc.htm?spm=a219a.7386797.0.0.wg2owj&amp;treeId=155&amp;articleId=104741&amp;docType=1" target="_blank" rel="external">支付宝签名算法</a></p>
<h3 id="自己实现的-composer-包用于签名"><a href="#自己实现的-composer-包用于签名" class="headerlink" title="自己实现的 composer 包用于签名"></a>自己实现的 composer 包用于签名</h3><p><a href="https://github.com/liyu001989/signature" target="_blank" rel="external">https://github.com/liyu001989/signature</a></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="http://progrium.com/blog/2012/12/17/http-signatures-with-content-hmac/" target="_blank" rel="external">http://progrium.com/blog/2012/12/17/http-signatures-with-content-hmac/</a></li>
<li><a href="http://stackoverflow.com/questions/3561381/custom-http-headers-naming-conventions" target="_blank" rel="external">http://stackoverflow.com/questions/3561381/custom-http-headers-naming-conventions</a></li>
<li><a href="https://www.twilio.com/docs/api/security#validating-requests" target="_blank" rel="external">https://www.twilio.com/docs/api/security#validating-requests</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前看到v2ex上的一个帖子&lt;a href=&quot;https://www.v2ex.com/t/326285&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.v2ex.com/t/326285&lt;/a&gt;，然后回想一下对接支付宝和微信的时候，
    
    </summary>
    
    
      <category term="hmac" scheme="http://blog.lyyw.com/tags/hmac/"/>
    
      <category term="https" scheme="http://blog.lyyw.com/tags/https/"/>
    
      <category term="rsa" scheme="http://blog.lyyw.com/tags/rsa/"/>
    
  </entry>
  
  <entry>
    <title>个人数据库设计原则</title>
    <link href="http://blog.lyyw.com/2016/11/30/2016-11-30%20how-to-design-database/"/>
    <id>http://blog.lyyw.com/2016/11/30/2016-11-30 how-to-design-database/</id>
    <published>2016-11-30T11:16:37.000Z</published>
    <updated>2016-12-07T05:03:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>起名字这个事情很麻烦，没有一些原则的情况下很容易就出现一些奇奇怪怪的名字。</p>
<p>记录一下我设计数据表和字段的几个原则。基本上也是 laravel 默认的行为。</p>
<ul>
<li><p>数据表名字为名词复数，users, posts, factories。</p>
<pre><code>很好理解,因为是个表嘛，一条记录是一个user，那么一张表就是users。不要加什么前缀了，基本上一个项目一个数据库了，xx_users的目的是啥啊。
</code></pre></li>
<li><p>关联关系的字段为名词单数 + 下划线id，user_id, post_id, factory_id。 </p>
</li>
<li>布尔类型表示标志位的用is + 下划线 + 加形容词。is_valid, is_paid。</li>
<li>记录时间的timestamp字段，过去式 + at，paid_at, expired_at, published_at。</li>
<li><p>看情况使用枚举enum</p>
<pre><code>这里有两种观点，一个是tinyint，一个是枚举。tinyint的问题是数字本身没有意义，我必须得找个地方去定义这些个数字，STATUS_PENDING_PAY = 0, STATUS_PAID = 1。基本上也都是定义在模型中了。
但是枚举就很方便，pending_pay, paid, 本身有意义。

http://komlenic.com/244/8-reasons-why-mysqls-enum-data-type-is-evil/

这里也有很多讨论，实在很纠那么就如上所说，不经常变得，选项比较少的，不使用数字的情况下，使用严格模式的enum。其他情况使用tinyint，个人还是很喜欢有意义的enum的。
</code></pre></li>
<li><p>如果使用枚举定义个状态之类的字段，那么我习惯用动词进行时和过去式，比如pending_pay, paid，successed，canceled。或者全部大写。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;起名字这个事情很麻烦，没有一些原则的情况下很容易就出现一些奇奇怪怪的名字。&lt;/p&gt;
&lt;p&gt;记录一下我设计数据表和字段的几个原则。基本上也是 laravel 默认的行为。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;数据表名字为名词复数，users, posts, factories。&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>升级 php7 后 isset 不太对了</title>
    <link href="http://blog.lyyw.com/2016/10/08/2016-10-08%20isset%20%E7%9A%84%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98/"/>
    <id>http://blog.lyyw.com/2016/10/08/2016-10-08 isset 的使用问题/</id>
    <published>2016-10-08T14:43:02.000Z</published>
    <updated>2016-10-08T14:52:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>公司升级 php7 后出现了一个问题<br>类似这样 <code>isset($post-&gt;user-&gt;name)</code> 始终为 false<br>之前的php 5.6 就很正常<br>laravel 版本是  5.1.35（很久没升级了）</p>
<h2 id="先看看isset"><a href="#先看看isset" class="headerlink" title="先看看isset"></a>先看看isset</h2><p>isset 用来检测变量是否设置</p>
<p>首先我们来看官方的一个<a href="http://php.net/manual/zh/function.isset.php#51113" target="_blank" rel="external">例子</a></p>
<p>大致上是下面这个意思</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"></div><div class="line">class Post</div><div class="line">&#123;</div><div class="line">    protected $attributes = [&apos;content&apos; =&gt; &apos;foobar&apos;];</div><div class="line"></div><div class="line">    public function __get($key)</div><div class="line">    &#123;</div><div class="line">        if (isset($this-&gt;attributes[$key])) &#123;</div><div class="line">            return $this-&gt;attributes[$key];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$post = new Post();</div><div class="line">echo isset($post-&gt;content);  // false</div></pre></td></tr></table></figure>
<p>上面这个例子将永远返回 false，因为 foo 并不是 Post 的属性，而是 __get 取出来的</p>
<h2 id="魔术方法-isset"><a href="#魔术方法-isset" class="headerlink" title="魔术方法 __isset"></a>魔术方法 __isset</h2><p>那么怎么解决上面那个问题呢？使用魔术方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;?PHP</div><div class="line">class Post</div><div class="line">&#123;</div><div class="line">    protected $attributes = [&apos;content&apos; =&gt; &apos;foobar&apos;];</div><div class="line"></div><div class="line">    public function __get($key)</div><div class="line">    &#123;</div><div class="line">        if (isset($this-&gt;attributes[$key])) &#123;</div><div class="line">            return $this-&gt;attributes[$key];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public function __isset($key)</div><div class="line">    &#123;</div><div class="line">        if (isset($this-&gt;attributes[$key])) &#123;</div><div class="line">            return true;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$post = new Post();</div><div class="line">echo isset($post-&gt;content);   //true</div></pre></td></tr></table></figure>
<h2 id="类似-Eloquent-的例子"><a href="#类似-Eloquent-的例子" class="headerlink" title="类似 Eloquent 的例子"></a>类似 Eloquent 的例子</h2><p>看着 laravel 5.1.35 的代码，我们自己写一个简单的例子</p>
<p>先有一个 Model，简单的实现。<code>__get</code>，<code>__set</code>，<code>__isset</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">class Model</div><div class="line">&#123;</div><div class="line">    // 存放属性</div><div class="line">    protected $attributes = [];</div><div class="line"></div><div class="line">    // 存放关系</div><div class="line">    protected $relations = [];</div><div class="line"></div><div class="line">    public function __get($key)</div><div class="line">    &#123;</div><div class="line">        if( isset($this-&gt;attributes[$key]) ) &#123;</div><div class="line">            return $this-&gt;attributes[$key];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">		  // 找到关联的对象，放在关系里面</div><div class="line">        if (method_exists($this, $key)) &#123;</div><div class="line">        </div><div class="line">        	  $relation = $this-&gt;$method();   </div><div class="line">        	  </div><div class="line">        	  return $this-&gt;relations[$method] = $relation;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public function __set($k, $v)</div><div class="line">    &#123;</div><div class="line">        $this-&gt;attributes[$k] = $v;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public function __isset($key)</div><div class="line">    &#123;</div><div class="line">        if (isset($this-&gt;attributes[$key]) || isset($this-&gt;relations[$key])) &#123;</div><div class="line">            return true;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后我们定义一个 Post Moel 和一个 User Moel</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">class Post extends Model</div><div class="line">&#123;</div><div class="line"></div><div class="line">    protected function user()</div><div class="line">    &#123;</div><div class="line">        $user = new User();</div><div class="line">        $user-&gt;name = &apos;user name&apos;;</div><div class="line">        return $user;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">class User extends Model</div><div class="line">&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>好了来验证一下isset</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">$post = new Post();</div><div class="line"></div><div class="line">echo &apos;isset 发帖用户：&apos;;</div><div class="line">echo isset($post-&gt;user) ? &apos;true&apos; : &apos;false&apos;;  // false</div><div class="line">echo PHP_EOL;</div><div class="line"></div><div class="line">echo &apos;isset 发帖用户的名字：&apos;;</div><div class="line">echo isset($post-&gt;user-&gt;name) ? &apos;true&apos; : &apos;false&apos;;  // false</div><div class="line">echo PHP_EOL;</div><div class="line"></div><div class="line">echo &apos;发帖用户的名字：&apos;;</div><div class="line">echo $post-&gt;user-&gt;name;    // user name</div><div class="line">echo PHP_EOL;</div><div class="line"></div><div class="line">echo &apos;再次判断 isset 发帖用户的名字：&apos;;</div><div class="line">echo isset($post-&gt;user-&gt;name) ? &apos;true&apos; : &apos;false&apos;;   // true</div><div class="line">echo PHP_EOL;</div></pre></td></tr></table></figure>
<h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p>分析上面的结果，感觉像是 php 7 isset 方法对对象的判断有了变化，如果先执行一次，$post-&gt;user-&gt;name，也就是将 user 放在 post 的 relations 中，这样 isset($post-&gt;user) 为 true，随后 isset($post-&gt;user-&gt;name) 才为 true。</p>
<p>最后在 <a href="https://github.com/illuminate/database/commit/c78e55c01c71e7a2e875efd6b80bb9eb0a24715a" target="_blank" rel="external">Eloquent model 的 git log 中</a> 找到了答案，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">PHP 7 has fixed a bug with __isset which affects both the </div><div class="line">native isset and empty methods. This causes specific issues </div><div class="line">with checking isset or empty on relations in Eloquent. In </div><div class="line">PHP 7 checking if a property exists on an unloaded relation, </div><div class="line">for example isset($this-&gt;relation-&gt;id) is always </div><div class="line">returning false because unlike PHP 5.6, PHP 7 is now </div><div class="line">checking the offset of each attribute before chaining to </div><div class="line">the next one. In PHP 5.6 it would eager load the relation </div><div class="line">without checking the offset. This change brings back the </div><div class="line">intended behavior of the core Eloquent model __isset method </div><div class="line">for PHP 7 so it works like it did in PHP 5.6.</div><div class="line"></div><div class="line">For reference, please check the following link, </div><div class="line">specifically Nikita Popov&apos;s comment (core PHP dev) - </div><div class="line">https://bugs.php.net/bug.php?id=69659</div></pre></td></tr></table></figure>
<p>大致上是 php7 isset 判断的时候，会依次判断。php5.6 则会预加载关系。其实 laravel 也早在5月份就做了相关的处理，所以升级 laravel 后，自然也就没有这个问题了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司升级 php7 后出现了一个问题&lt;br&gt;类似这样 &lt;code&gt;isset($post-&amp;gt;user-&amp;gt;name)&lt;/code&gt; 始终为 false&lt;br&gt;之前的php 5.6 就很正常&lt;br&gt;laravel 版本是  5.1.35（很久没升级了）&lt;/p&gt;
&lt;h
    
    </summary>
    
    
      <category term="laravel" scheme="http://blog.lyyw.com/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>composer 使用私有仓库</title>
    <link href="http://blog.lyyw.com/2016/08/25/2016-08-25%20composer-%E4%BD%BF%E7%94%A8%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/"/>
    <id>http://blog.lyyw.com/2016/08/25/2016-08-25 composer-使用私有仓库/</id>
    <published>2016-08-25T03:54:46.000Z</published>
    <updated>2016-08-25T09:43:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>composer 使用了很久了，一直以为发布在 padkagist 中的包必须发布在 github 上。今天看了文档才发现，我还是太年轻了。记录一下吧。</p>
<p><a href="http://docs.phpcomposer.com/05-repositories.html" target="_blank" rel="external">http://docs.phpcomposer.com/05-repositories.html</a> 文档里已经有详细的介绍了。其实不管你的私有仓库在哪，是 git 还是 svn，是 bitbucket 还是 gitlab，只要告诉 composer 去哪里找到这个包就可以了，像下面这样：</p>
<pre><code>{
    &quot;repositories&quot;: [
        {
            &quot;type&quot;: &quot;vcs&quot;,
            &quot;url&quot;: &quot;https://github.com/igorw/monolog&quot;
        }
    ],
    &quot;require&quot;: {
        &quot;monolog/monolog&quot;: &quot;dev-bugfix&quot;
    }
}
</code></pre><p>url 可以使用 https 和可以是 ssh。https 的话需要输入用户名和密码，不过 composer 会帮助你记录密码到全局的 auth.json 文件中。</p>
<p>事实又一次教育我们，先看文档是多么的重要。 </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;composer 使用了很久了，一直以为发布在 padkagist 中的包必须发布在 github 上。今天看了文档才发现，我还是太年轻了。记录一下吧。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://docs.phpcomposer.com/05-repositories.
    
    </summary>
    
    
      <category term="composer" scheme="http://blog.lyyw.com/tags/composer/"/>
    
  </entry>
  
  <entry>
    <title>install gitlab</title>
    <link href="http://blog.lyyw.com/2016/08/18/2016-08-18%20install-gitlab/"/>
    <id>http://blog.lyyw.com/2016/08/18/2016-08-18 install-gitlab/</id>
    <published>2016-08-18T09:35:02.000Z</published>
    <updated>2016-10-17T15:48:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>官方安装地址 <a href="https://about.gitlab.com/downloads" target="_blank" rel="external">https://about.gitlab.com/downloads</a></p>
<p>phphub 教程 <a href="https://phphub.org/topics/2568" target="_blank" rel="external">https://phphub.org/topics/2568</a></p>
<p>使用现有nginx服务器 <a href="http://www.liaohuqiu.net/cn/posts/non-bundled-web-server-for-gitlab/" target="_blank" rel="external">http://www.liaohuqiu.net/cn/posts/non-bundled-web-server-for-gitlab/</a> </p>
<p>配置导入github项目 <a href="http://docs.gitlab.com/ee/integration/github.html" target="_blank" rel="external">http://docs.gitlab.com/ee/integration/github.html</a></p>
<p>支持https，使用cerbot <a href="https://certbot.eff.org" target="_blank" rel="external">https://certbot.eff.org</a></p>
<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>阮一峰对各种工作流程对比 <a href="http://www.ruanyifeng.com/blog/2015/12/git-workflow.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2015/12/git-workflow.html</a> </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;官方安装地址 &lt;a href=&quot;https://about.gitlab.com/downloads&quot; target=&quot;_blank&quot; re
    
    </summary>
    
    
      <category term="gitlab" scheme="http://blog.lyyw.com/tags/gitlab/"/>
    
      <category term="git" scheme="http://blog.lyyw.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>请正确使用 composer.lock</title>
    <link href="http://blog.lyyw.com/2016/08/18/2016-08-18%20how-to-use-composer/"/>
    <id>http://blog.lyyw.com/2016/08/18/2016-08-18 how-to-use-composer/</id>
    <published>2016-08-18T07:20:43.000Z</published>
    <updated>2017-02-09T10:14:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>到底这个 composer.lock 和 vendor 该怎么弄，有下面几种情况</p>
<ol>
<li>composer.lock 和 vendor 都提交到代码库，然后就没有然后了。</li>
<li>composer.lock 和 vendor 都不提交，使用composer update 安装和更新</li>
<li>忽略composer.lock，不提交vendor目录，使用composer update 安装和更新</li>
</ol>
<p>不知道为什么，周围很多人都这么用，全都说不出个为什么，但是就是觉得这样是对的，因为他也没遇到过什么大问题。</p>
<p>那么 composer 安装完了以后，到底提不提交 composer.lock，和 vendor 目录呢？</p>
<h2 id="composer-lock"><a href="#composer-lock" class="headerlink" title="composer.lock"></a>composer.lock</h2><p>这里<a href="http://docs.phpcomposer.com/01-basic-usage.html#composer.lock-The-Lock-File" target="_blank" rel="external"> http://docs.phpcomposer.com/01-basic-usage.html#composer.lock-The-Lock-File</a> 有详细的介绍，用来锁定我们安装的包版本的。</p>
<h2 id="vendor"><a href="#vendor" class="headerlink" title="vendor"></a>vendor</h2><p>通过 composer 下载的各种第三方的包，都会在 vendor 目录里面。</p>
<p><strong>正确的方式是提交 composer.lock，但是不提交 vendor 目录，使用composer install 安装第三方依赖</strong></p>
<h2 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h2><ul>
<li>比如有一天突然要写一个 laravel 项目，于是我配置了 composer.json 文件，指定了 <code>&quot;laravel/framework&quot;: &quot;5.1.*&quot;</code>，这个时候 larval 最新的版本是 5.1.4，执行 <code>composer install</code>， larval 5.1.4 被下载到 vendor 目录中，同时生成了 composer.lock 文件，lock 文件中锁定了使用 laravel 5.1.4。我开始了愉快的开发，并把 composer.json 和 composer.lock 两个文件提交到代码库里面。</li>
<li>一段时间以后，需求越来越多，让同事们帮我完成吧，于是他们 clone 了代码，执行 <code>composer install</code>，因为有composer.lock文件的存在，自然他们下载的也是5.1.4。大家的代码都是一致的，绝对没有问题</li>
<li>项目差不多了，测试一下吧，于是，运维人员把代码部署到服务器，执行了<code>composer install</code> ，同样的，也是 5.1.4 。本地，同事，服务器的代码都一致，完全没毛病。</li>
<li>但是其实这个时候 laravel 已经更新到了 5.1.7 并且解决了一个很重要的bug。我发现了这个问题，作为项目的负责人，我决定升级laravel，于是我在本地执行了<code>composer update laravel/framework</code>，这时 laravel 5.1.7 被下载到 vendor 目录中，同时 composer.lock 更新了锁定说明为 5.1.7。我只需要提交 comopser.lock即可。同事们更新了代码，同样只是执行 <code>composer install</code>，运维人员同样也是更新代码，<code>composer install</code>。</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>有了 composer.lock 的保障，所有通过 <code>composer install</code> 下载的包绝对是一样的，那么当然就没有必要提交 vendor 目录。<code>composer update</code> 应该交给指定的人更新，更新完了要测试，毕竟是第三方的库，不能保证他完全正确，又或是版本指定错了等等不确定因素吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;到底这个 composer.lock 和 vendor 该怎么弄，有下面几种情况&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;composer.lock 和 vendor 都提交到代码库，然后就没有然后了。&lt;/li&gt;
&lt;li&gt;composer.lock 和 vendor 都不提交，使用com
    
    </summary>
    
    
      <category term="composer" scheme="http://blog.lyyw.com/tags/composer/"/>
    
  </entry>
  
  <entry>
    <title>getimagesize得到的不一定是真实值</title>
    <link href="http://blog.lyyw.com/2016/06/29/2016-06-29%20getimagesize%E5%BE%97%E5%88%B0%E7%9A%84%E4%B8%8D%E4%B8%80%E5%AE%9A%E6%98%AF%E7%9C%9F%E5%AE%9E%E5%80%BC/"/>
    <id>http://blog.lyyw.com/2016/06/29/2016-06-29 getimagesize得到的不一定是真实值/</id>
    <published>2016-06-29T03:35:23.000Z</published>
    <updated>2017-01-03T14:48:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>是之前遇到的一个奇怪的问题，就是使用 getimagesize 去获取一个图片的长和宽，但是得到的信息，长和宽反了。</p>
<p>应该是图片自身的原因，找到如下代码，解决了问题<br><a href="http://stackoverflow.com/questions/36069618/php-getimagesize-reverses-width-height" target="_blank" rel="external">http://stackoverflow.com/questions/36069618/php-getimagesize-reverses-width-height</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$image = imagecreatefromstring(file_get_contents($file));</div><div class="line">$exif = exif_read_data($file);</div><div class="line">if(!empty($exif[&apos;Orientation&apos;])) &#123;</div><div class="line">    echo $exif[&apos;Orientation&apos;];</div><div class="line">    switch($exif[&apos;Orientation&apos;]) &#123;</div><div class="line">            case 8:</div><div class="line">                $image = imagerotate($image,90,0);</div><div class="line">                break;</div><div class="line">            case 3:</div><div class="line">                $image = imagerotate($image,180,0);</div><div class="line">                break;</div><div class="line">            case 6:</div><div class="line">                $image = imagerotate($image,-90,0);</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">imagejpeg($image, $file);</div><div class="line">print_r(getimagesize($file));</div></pre></td></tr></table></figure>
<p>大概是图片的元信息除了问题，EXIF (exchangeable image file format) ，没再细看了，很复杂的样子，先记录一下。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;是之前遇到的一个奇怪的问题，就是使用 getimagesize 去获取一个图片的长和宽，但是得到的信息，长和宽反了。&lt;/p&gt;
&lt;p&gt;应该是图片自身的原因，找到如下代码，解决了问题&lt;br&gt;&lt;a href=&quot;http://stackoverflow.com/questions/
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>各种设备的翻墙问题</title>
    <link href="http://blog.lyyw.com/2016/06/23/2016-06-23%20gfw-problem/"/>
    <id>http://blog.lyyw.com/2016/06/23/2016-06-23 gfw-problem/</id>
    <published>2016-06-22T16:00:26.000Z</published>
    <updated>2016-08-04T14:55:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下各种设备的翻墙，核心还是shadowsocks，不得不说，真心好用</p>
<h2 id="电脑"><a href="#电脑" class="headerlink" title="电脑"></a>电脑</h2><p>电脑一直是vpn + shadowsocks组合。composer, bower, npm啥的还是需要翻墙的，所以需要的时候就连vpn。</p>
<p>我的服务器是日本的conoha，比digitalOcean新加坡服务器的快很多，毕竟离得近，但是总是觉得不够好用。连接需要一阵，而且不够稳定，偶尔还断开。后来发现命令行也是可以shadowsocks的。</p>
<ol>
<li>polipo 安装方式<a href="https://github.com/nightire/dotfiles" target="_blank" rel="external">link</a>这里已经说得很清楚了，</li>
<li>cow <a href="https://github.com/cyfdecyf/cow" target="_blank" rel="external">link</a></li>
</ol>
<p>大致都是修改http_proxy，将所有的http请求代理到shadowsocks。</p>
<h2 id="手机"><a href="#手机" class="headerlink" title="手机"></a>手机</h2><p>手机当然也想翻墙了，原来用的openvpn，同样是感觉不够好用，后来同事推荐了 <code>shadowrocket</code>，6块钱，简直是超值，手机也能用shadowsocks，好爽啊。</p>
<h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><p>原来公司服务器在国外，后天突然就弄回国内了，所以各种服务就用不了了，比如paypal支付，facebook，twitter，google等的oauth登录。问了一圈人，没有找到非常好的办法。决定用cow试试，欣慰的是guzzlehttp这个库很好的支持了<code>http_proxy</code>，只需要设置系统变量即可。于是supervisor把cow挂起来，<code>http_proxy</code>指向cow, facebook，google登录就搞定了。但是，twitter居然用的oauth1，omnipay也不支持代理，所以我有满世界的找了两个可以使用代理的库，总算是完成了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下各种设备的翻墙，核心还是shadowsocks，不得不说，真心好用&lt;/p&gt;
&lt;h2 id=&quot;电脑&quot;&gt;&lt;a href=&quot;#电脑&quot; class=&quot;headerlink&quot; title=&quot;电脑&quot;&gt;&lt;/a&gt;电脑&lt;/h2&gt;&lt;p&gt;电脑一直是vpn + shadowsocks组合。
    
    </summary>
    
    
      <category term="FUCK-GFW" scheme="http://blog.lyyw.com/tags/FUCK-GFW/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu 搭建 openvpn 记录</title>
    <link href="http://blog.lyyw.com/2016/05/18/2016-05-18%20ubuntu-%E6%90%AD%E5%BB%BA-openvpn-%E8%AE%B0%E5%BD%95/"/>
    <id>http://blog.lyyw.com/2016/05/18/2016-05-18 ubuntu-搭建-openvpn-记录/</id>
    <published>2016-05-18T15:22:28.000Z</published>
    <updated>2016-06-05T12:58:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下每次搭建openvpn的过程</p>
<p>shadowsocks挺好用的，平时基本够用了，但是偶尔还是需要vpn的</p>
<p>参考的 ucloud的教程，挺有帮助，<a href="https://docs.ucloud.cn/software/vpn/OpenVPN4Ubuntu.html" target="_blank" rel="external">https://docs.ucloud.cn/software/vpn/OpenVPN4Ubuntu.html</a></p>
<ol>
<li><p>安装openvpn</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">⋊&gt; apt-get update</div><div class="line">⋊&gt; apt-get install openvpn libssl-dev openssl</div><div class="line">⋊&gt; apt-get install easy-rsa</div></pre></td></tr></table></figure>
</li>
<li><p>配置 vars</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">⋊&gt; cp -r /usr/share/easy-rsa/ /etc/openvpn/easy-rsa/</div><div class="line">⋊&gt; cd /etc/openvpn/easy-rsa/</div><div class="line">⋊&gt; vim vars</div><div class="line">⋊&gt; 修改export KEY_SIZE=2048</div></pre></td></tr></table></figure>
</li>
<li><p>配置 server</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">⋊&gt; cp -r /usr/share/doc/openvpn/examples/sample-config-files/server.conf.gz /etc/openvpn/</div><div class="line">⋊&gt; gzip -d server.conf.gz</div><div class="line">⋊&gt; vim server</div><div class="line"></div><div class="line">    需要修改的大概是这样</div><div class="line">    proto tcp</div><div class="line">    ca easy-rsa/keys/ca.crt</div><div class="line">    cert easy-rsa/keys/foobar.com.crt</div><div class="line">    key easy-rsa/keys/foobar.com.key</div><div class="line">    dh easy-rsa/keys/dh2048.pem</div><div class="line">    push &quot;route 192.168.20.0 255.255.255.0&quot;</div><div class="line">    push &quot;redirect-gateway def1 bypass-dhcp&quot;</div><div class="line">    push &quot;dhcp-option DNS 208.67.220.220&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>生成证书</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">⋊&gt; cd /etc/openvpn/easy-rsa/</div><div class="line">⋊&gt; source ./vars</div><div class="line">⋊&gt; ./clean-all</div><div class="line">⋊&gt; ./build-ca</div><div class="line">⋊&gt; ./build-key-server foobar.com</div><div class="line">⋊&gt; ./build-dh</div><div class="line">⋊&gt; ./build-key client1</div><div class="line">⋊&gt; ./build-key client2</div><div class="line">⋊&gt; openvpn --genkey --secret /etc/openvpn/easy-rsa/keys/ta.key</div></pre></td></tr></table></figure>
</li>
<li><p>启动服务，修改iptables</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">⋊&gt; sudo service openvpn start</div><div class="line">⋊&gt; vim /etc/sysctl.conf</div><div class="line">⋊&gt; 修改 net.ipv4.ip_forward 为 1</div><div class="line">⋊&gt; sysctl -p</div><div class="line">⋊&gt; iptables -t nat -A POSTROUTING -s 10.20.0.0/24 -o eth0 -j MASQUERADE</div><div class="line">⋊&gt; ptables -A INPUT -p TCP --dport 1194 -j ACCEPT</div><div class="line">⋊&gt; iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</div><div class="line">⋊&gt; vim /etc/network/if-post-down.d/iptables</div><div class="line"></div><div class="line">    填写</div><div class="line">    #!/bin/bash</div><div class="line">    iptables-save &gt; /etc/iptables.rules</div><div class="line">⋊&gt; chmod +x /etc/network/if-post-down.d/iptables</div><div class="line">⋊&gt; vim /etc/network/if-pre-up.d/iptables</div><div class="line"></div><div class="line">    填写</div><div class="line">    #!/bin/bash</div><div class="line">    iptables-restore &lt; /etc/iptables.rules</div><div class="line">⋊&gt; chmod +x /etc/network/if-pre-up.d/iptables</div></pre></td></tr></table></figure>
</li>
<li><p>拷贝配置到本地</p>
<p> 主要是这4个文件（ca.crt，client1.crt，client1.key，ta.key）</p>
<p> 增加客户端配置文件，大概长这样</p>
<pre><code>client
dev tun
proto tcp
remote xxx.xxx.xx.xx 1194 # 你的服务器ip
resolv-retry infinite
nobind
persist-key
persist-tun
ca ca.crt
cert client1.crt
key client1.key
comp-lzo
verb 3
</code></pre></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下每次搭建openvpn的过程&lt;/p&gt;
&lt;p&gt;shadowsocks挺好用的，平时基本够用了，但是偶尔还是需要vpn的&lt;/p&gt;
&lt;p&gt;参考的 ucloud的教程，挺有帮助，&lt;a href=&quot;https://docs.ucloud.cn/software/vpn/Ope
    
    </summary>
    
    
      <category term="FUCK-GFW" scheme="http://blog.lyyw.com/tags/FUCK-GFW/"/>
    
  </entry>
  
  <entry>
    <title>laravel Eloquent save 触发了哪些事件</title>
    <link href="http://blog.lyyw.com/2016/05/16/2016-05-16%20laravel-Eloquent-Event/"/>
    <id>http://blog.lyyw.com/2016/05/16/2016-05-16 laravel-Eloquent-Event/</id>
    <published>2016-05-16T15:17:43.000Z</published>
    <updated>2016-05-16T16:24:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下laravel Eloquent 事件的使用</p>
<p>需求是这样的，如果在订单状态改变的时候给对应的用户发送消息，拽过来同事开始讨论</p>
<ol>
<li>当然第一个想到的就是用Eloquent的事件，订单状态变了，会触发事件，但是Eloquent的这些updated,saved事件怎么知道是订单状态变了，而不是其他值改变了触发的呢？消息里面需要用到订单原来的属性怎么办？</li>
<li>或者就是controller处理完逻辑，改变了订单的状态自己触发一个事件，<br>那么是不是触发事件需要传入原来的订单的属性和改变后的属性呢？这样listener才能确切的知道订单的状态是怎么变得，然后发送对应的消息？</li>
<li>或者压根不触发事件，直接在controller中处理这个逻辑，因为controller明白到底发生了什么，直接发送消息，想怎么发怎么发</li>
</ol>
<p>我们有好多好多的订单，好多好多的地方会改变订单状态，显然2，3两个方案太扯淡了，每个处理逻辑的地方都需要增加代码，处理一堆逻辑，写着就不爽，维护起来不是要疯了？</p>
<hr>
<p>好吧我们来看看laravel Eloquent save的时候到底触发了哪些事件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">Illuminate/Database/Eloquent/Model.php</div><div class="line"></div><div class="line"></div><div class="line"> public function save(array $options = [])</div><div class="line"> &#123;</div><div class="line">     $query = $this-&gt;newQueryWithoutScopes();</div><div class="line"></div><div class="line">     if ($this-&gt;fireModelEvent(&apos;saving&apos;) === false) &#123;</div><div class="line">         return false;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     if ($this-&gt;exists) &#123;</div><div class="line">         $saved = $this-&gt;performUpdate($query, $options);</div><div class="line">     &#125; else &#123;</div><div class="line">         $saved = $this-&gt;performInsert($query, $options);</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     if ($saved) &#123;</div><div class="line">         $this-&gt;finishSave($options);</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     return $saved;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>首先触发的当然是<code>saving</code>，如果saving返回的是false，那么save就失败了，返回false</p>
<p>接着如果$this-&gt;exists，就是这个model不是新创建的，那么就需要进行更新操作</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">protected function performUpdate(Builder $query, array $options = [])</div><div class="line">&#123;</div><div class="line">    $dirty = $this-&gt;getDirty();</div><div class="line"></div><div class="line">    if (count($dirty) &gt; 0) &#123;</div><div class="line"></div><div class="line">        if ($this-&gt;fireModelEvent(&apos;updating&apos;) === false) &#123;</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if ($this-&gt;timestamps &amp;&amp; Arr::get($options, &apos;timestamps&apos;, true)) &#123;</div><div class="line">            $this-&gt;updateTimestamps();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        $dirty = $this-&gt;getDirty();</div><div class="line"></div><div class="line">        if (count($dirty) &gt; 0) &#123;</div><div class="line">            $numRows = $this-&gt;setKeysForSaveQuery($query)-&gt;update($dirty);</div><div class="line"></div><div class="line">            $this-&gt;fireModelEvent(&apos;updated&apos;, false);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return true;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看看更新干了什么，</p>
<ul>
<li><p>首先如果这个模型dirty了，也就是脏了，也就是有属性改变了,那么才需要更新</p>
</li>
<li><p>先触发<code>updating</code>，更新失败了就false，</p>
</li>
<li><p>更新时间戳</p>
<pre><code>这里又判断了count($dirty) &gt; 0，为什么？？更updateTimestamps有什么关系吗？没有仔细看，以后再说吧
</code></pre></li>
<li><p>然后执行update，也就是写入了数据库</p>
</li>
<li>最后触发<code>updated</code></li>
</ul>
<p>那么如果这个对象是新建的，也就是需要执行插入操作，performInsert也做了差不多的事，</p>
<ul>
<li>触发<code>creating</code>,</li>
<li>执行insert，插入数据库，</li>
<li>最后<code>created</code>。</li>
</ul>
<p>最后回到save方法，如果更新或者插入操作成功了，那么就finishSave来结束save，</p>
<p>finishSave 触发了<code>saved</code>事件, 最后syncOriginal。</p>
<p>小结一下</p>
<ul>
<li>新创建的对象，save依次触发 <code>saving</code>-&gt;<code>creating</code>-&gt;<code>created</code>-&gt;<code>saved</code></li>
<li>已存在的对象，save依次触发 <code>saving</code>-&gt;<code>updating</code>-&gt;<code>updated</code>-&gt;<code>saved</code></li>
</ul>
<hr>
<p>好了知道了我们知道了model save的时候触发了哪些事件，但是还是没有解决我们的问题啊，到底是因为状态改变了触发的还是因为订单其他的值改变了触发的呢？订单原来的状态怎么获取呢？</p>
<p>这就需要看看isDirty和syncOriginal是怎么回事了</p>
<p>打印过Eloquent 对象的应该都会发现，其实模型会有两个数组，一个original，一个attributes。</p>
<p>这下应该就明白了，初始化一个模型的时候这两个数组是一样的，赋值操作只是改变attributes，所以isDirty也就是根据两个数据来判断模型是否dirty了，模型触发完<code>saved</code>事件后才会执行syncOriginal，syncOriginal也就是将attributes赋值给original。所以上面触发的所有事件，我们都是能拿到原来的值和变化的值得。</p>
<p>所以我们的问题也就解决了，当模型触发<code>updated</code>事件的时候，我们根据isDirty([‘status’]) 知道订单状态改变了，然后拿到订单之前是个什么样子，改变后是个什么样子，该发什么消息也就很明朗了。</p>
<p>laravel设计的好牛逼，事实教育我们，要多看文档，多看代码。幸好我机智的看了代码，要是用了2，3两个方案，我不是该哭了？</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下laravel Eloquent 事件的使用&lt;/p&gt;
&lt;p&gt;需求是这样的，如果在订单状态改变的时候给对应的用户发送消息，拽过来同事开始讨论&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当然第一个想到的就是用Eloquent的事件，订单状态变了，会触发事件，但是Eloquent的这些u
    
    </summary>
    
    
      <category term="laravel" scheme="http://blog.lyyw.com/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>2016 计划</title>
    <link href="http://blog.lyyw.com/2016/05/11/2016-05-11%202016-plan/"/>
    <id>http://blog.lyyw.com/2016/05/11/2016-05-11 2016-plan/</id>
    <published>2016-05-11T15:47:44.000Z</published>
    <updated>2016-12-08T06:28:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录一些想做和该做的事吧</p>
<p>2016年过去一半了，感觉也没学什么，还是很挫，要学的还有很多</p>
<h2 id="laravel-lumen"><a href="#laravel-lumen" class="headerlink" title="laravel/lumen"></a>laravel/lumen</h2><ul>
<li>[x] 把lumen/laravel的单元测试弄明白，完成demo中的单元测试</li>
<li>[x] laravel5.3快出来了，研究一下，升级一下项目</li>
<li>[ ] Laravel and Elasticsearch <a href="https://laravel-news.com/2016/06/laravel-and-elasticsearch/?utm_campaign=Laravel%20News&amp;utm_medium=email&amp;utm_source=ln108" target="_blank" rel="external">link</a></li>
</ul>
<h2 id="node"><a href="#node" class="headerlink" title="node"></a>node</h2><ul>
<li>[ ] 学习node，最好能写个demo，express啥的</li>
<li>[x] 写个爬虫抓一下拉钩，智联的数据，筛选一下公司</li>
</ul>
<h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><ul>
<li>[ ] 学习vue，试着调用api随便弄个什么吧</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一些想做和该做的事吧&lt;/p&gt;
&lt;p&gt;2016年过去一半了，感觉也没学什么，还是很挫，要学的还有很多&lt;/p&gt;
&lt;h2 id=&quot;laravel-lumen&quot;&gt;&lt;a href=&quot;#laravel-lumen&quot; class=&quot;headerlink&quot; title=&quot;laravel
    
    </summary>
    
    
      <category term="learning" scheme="http://blog.lyyw.com/tags/learning/"/>
    
  </entry>
  
</feed>
